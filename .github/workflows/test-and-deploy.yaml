name: Test and Deploy CloudFunction

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
    branches:
      - main

permissions:
  actions: read
  checks: read
  contents: read
  packages: read
  pull-requests: read
  statuses: read
  id-token: write

jobs:
  test:
    name: Format, vet, test
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Go mod tidy
        run: |
          go mod tidy
          git diff --quiet

      - name: Verify formatting
        run: |
          go fmt ./...
          git diff --quiet

      - name: Vet code
        run: go vet ./...

      - name: Verify dependencies
        run: go mod verify

      - name: Check for vulnerable dependencies
        run: go tool govulncheck ./...

      - name: Create test database
        env:
          PGPASSWORD: postgres
        run: psql -h localhost -U postgres -c 'CREATE DATABASE flashlight;'

      - name: Run tests
        run: go test ./...

      - name: Go build
        run: |
          go build
          go build ./cmd/get-stats/main.go
          go build ./cmd/fix-fixtures/main.go

      - name: Make .env for local server
        run: |
          touch ./cmd/.env

      - name: Test user id rate limit
        run: |
          ./cmd/test-user-id-rate-limit.sh

      - name: Test ip rate limit
        run: |
          ./cmd/test-ip-rate-limit.sh

  deploy-test-instance:
    if: "github.event.pull_request.merged == false && !contains(github.event.pull_request.labels.*.name, 'skip-deployment')"
    name: Deploy test instance
    runs-on: ubuntu-latest
    # Only deploy the test instance if the tests pass
    needs: test
    steps:
      - uses: actions/checkout@v5

      - name: GCP login
        uses: google-github-actions/auth@v3
        with:
          project_id: 'prism-overlay'
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}

      - name: Login to GAR
        uses: docker/login-action@v2.1.0
        with:
          registry: northamerica-northeast2-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}

      - name: Deploy test instance
        run: ./cmd/deploy.sh flashlight-test

  build-and-deploy:
    if: github.event.pull_request.merged == true
    name: Deploy cloud function
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: GCP login
        uses: google-github-actions/auth@v3
        with:
          project_id: 'prism-overlay'
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}

      - name: Login to GAR
        uses: docker/login-action@v2.1.0
        with:
          registry: northamerica-northeast2-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}

      - name: Deploy production instance
        run: ./cmd/deploy.sh flashlight
